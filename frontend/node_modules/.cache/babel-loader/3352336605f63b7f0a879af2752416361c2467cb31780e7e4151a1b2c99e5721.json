{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tbvj1\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\cortex-v2\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/contexts/AuthContext.js\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// API 기본 URL\nconst API_BASE_URL = \"http://localhost:5000/api\";\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // API 호출 헬퍼 함수\n  const apiCall = async (endpoint, options = {}) => {\n    try {\n      const token = localStorage.getItem(\"token\");\n      const config = {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          ...(token && {\n            Authorization: `Bearer ${token}`\n          }),\n          ...options.headers\n        },\n        ...options\n      };\n      const response = await fetch(`${API_BASE_URL}${endpoint}`, config);\n\n      // 응답 상태 확인\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(\"API 호출 에러:\", error);\n      throw error;\n    }\n  };\n\n  // 로그인 함수\n  const login = async (email, password) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await apiCall(\"/auth/login\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      if (response.success) {\n        const {\n          access_token,\n          user: userData\n        } = response;\n\n        // 토큰 저장\n        localStorage.setItem(\"token\", access_token);\n\n        // 사용자 정보 설정\n        setUser(userData);\n        return {\n          success: true,\n          user: userData\n        };\n      } else {\n        throw new Error(response.message || \"로그인에 실패했습니다.\");\n      }\n    } catch (error) {\n      setError(error.message);\n      return {\n        success: false,\n        error: error.message\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 회원가입 함수\n  const register = async (email, username, password) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await apiCall(\"/auth/register\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          email,\n          username,\n          password\n        })\n      });\n      if (response.success) {\n        const {\n          access_token,\n          user: userData\n        } = response;\n\n        // 토큰 저장\n        localStorage.setItem(\"token\", access_token);\n\n        // 사용자 정보 설정\n        setUser(userData);\n        return {\n          success: true,\n          user: userData\n        };\n      } else {\n        throw new Error(response.message || \"회원가입에 실패했습니다.\");\n      }\n    } catch (error) {\n      setError(error.message);\n      return {\n        success: false,\n        error: error.message\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 로그아웃 함수\n  const logout = () => {\n    localStorage.removeItem(\"token\");\n    setUser(null);\n    setError(null);\n  };\n\n  // 현재 사용자 정보 가져오기\n  const getCurrentUser = async () => {\n    try {\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        return null;\n      }\n      const response = await apiCall(\"/auth/me\");\n      if (response.success) {\n        setUser(response.user);\n        return response.user;\n      } else {\n        // 토큰이 유효하지 않음\n        localStorage.removeItem(\"token\");\n        return null;\n      }\n    } catch (error) {\n      console.error(\"사용자 정보 가져오기 실패:\", error);\n      localStorage.removeItem(\"token\");\n      return null;\n    }\n  };\n\n  // 컴포넌트 마운트 시 사용자 정보 확인\n  useEffect(() => {\n    const initAuth = async () => {\n      setLoading(true);\n      try {\n        await getCurrentUser();\n      } catch (error) {\n        console.error(\"인증 초기화 실패:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    initAuth();\n  }, []);\n  const value = {\n    user,\n    loading,\n    error,\n    login,\n    register,\n    logout,\n    getCurrentUser,\n    apiCall // 다른 컴포넌트에서 API 호출할 때 사용\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"PA9FxEY9xSNRrsSqaLtbYei52Hs=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","API_BASE_URL","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","error","setError","apiCall","endpoint","options","token","localStorage","getItem","config","method","headers","Authorization","response","fetch","ok","errorData","json","message","status","console","login","email","password","body","JSON","stringify","success","access_token","userData","setItem","register","username","logout","removeItem","getCurrentUser","initAuth","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/tbvj1/OneDrive/바탕 화면/cortex-v2/frontend/src/contexts/AuthContext.js"],"sourcesContent":["// src/contexts/AuthContext.js\r\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\r\n\r\nconst AuthContext = createContext();\r\n\r\n// API 기본 URL\r\nconst API_BASE_URL = \"http://localhost:5000/api\";\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error(\"useAuth must be used within an AuthProvider\");\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // API 호출 헬퍼 함수\r\n  const apiCall = async (endpoint, options = {}) => {\r\n    try {\r\n      const token = localStorage.getItem(\"token\");\r\n\r\n      const config = {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          ...(token && { Authorization: `Bearer ${token}` }),\r\n          ...options.headers,\r\n        },\r\n        ...options,\r\n      };\r\n\r\n      const response = await fetch(`${API_BASE_URL}${endpoint}`, config);\r\n\r\n      // 응답 상태 확인\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(\r\n          errorData.message || `HTTP error! status: ${response.status}`\r\n        );\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error(\"API 호출 에러:\", error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // 로그인 함수\r\n  const login = async (email, password) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      const response = await apiCall(\"/auth/login\", {\r\n        method: \"POST\",\r\n        body: JSON.stringify({ email, password }),\r\n      });\r\n\r\n      if (response.success) {\r\n        const { access_token, user: userData } = response;\r\n\r\n        // 토큰 저장\r\n        localStorage.setItem(\"token\", access_token);\r\n\r\n        // 사용자 정보 설정\r\n        setUser(userData);\r\n\r\n        return { success: true, user: userData };\r\n      } else {\r\n        throw new Error(response.message || \"로그인에 실패했습니다.\");\r\n      }\r\n    } catch (error) {\r\n      setError(error.message);\r\n      return { success: false, error: error.message };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // 회원가입 함수\r\n  const register = async (email, username, password) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      const response = await apiCall(\"/auth/register\", {\r\n        method: \"POST\",\r\n        body: JSON.stringify({ email, username, password }),\r\n      });\r\n\r\n      if (response.success) {\r\n        const { access_token, user: userData } = response;\r\n\r\n        // 토큰 저장\r\n        localStorage.setItem(\"token\", access_token);\r\n\r\n        // 사용자 정보 설정\r\n        setUser(userData);\r\n\r\n        return { success: true, user: userData };\r\n      } else {\r\n        throw new Error(response.message || \"회원가입에 실패했습니다.\");\r\n      }\r\n    } catch (error) {\r\n      setError(error.message);\r\n      return { success: false, error: error.message };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // 로그아웃 함수\r\n  const logout = () => {\r\n    localStorage.removeItem(\"token\");\r\n    setUser(null);\r\n    setError(null);\r\n  };\r\n\r\n  // 현재 사용자 정보 가져오기\r\n  const getCurrentUser = async () => {\r\n    try {\r\n      const token = localStorage.getItem(\"token\");\r\n      if (!token) {\r\n        return null;\r\n      }\r\n\r\n      const response = await apiCall(\"/auth/me\");\r\n\r\n      if (response.success) {\r\n        setUser(response.user);\r\n        return response.user;\r\n      } else {\r\n        // 토큰이 유효하지 않음\r\n        localStorage.removeItem(\"token\");\r\n        return null;\r\n      }\r\n    } catch (error) {\r\n      console.error(\"사용자 정보 가져오기 실패:\", error);\r\n      localStorage.removeItem(\"token\");\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // 컴포넌트 마운트 시 사용자 정보 확인\r\n  useEffect(() => {\r\n    const initAuth = async () => {\r\n      setLoading(true);\r\n      try {\r\n        await getCurrentUser();\r\n      } catch (error) {\r\n        console.error(\"인증 초기화 실패:\", error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    initAuth();\r\n  }, []);\r\n\r\n  const value = {\r\n    user,\r\n    loading,\r\n    error,\r\n    login,\r\n    register,\r\n    logout,\r\n    getCurrentUser,\r\n    apiCall, // 다른 컴포넌트에서 API 호출할 때 사용\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}